define(["app/plugins/sdk","lodash"], function(__WEBPACK_EXTERNAL_MODULE_grafana_app_plugins_sdk__, __WEBPACK_EXTERNAL_MODULE_lodash__) { return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// object to store loaded and loading wasm modules
/******/ 	var installedWasmModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// object with all compiled WebAssembly.Modules
/******/ 	__webpack_require__.w = {};
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./module.ts");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./graph_tooltip.ts":
/*!**************************!*\
  !*** ./graph_tooltip.ts ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar _ = __webpack_require__(/*! lodash */ \"lodash\");\nvar panel_config_1 = __webpack_require__(/*! ./panel_config */ \"./panel_config.ts\");\n\nvar GraphTooltip = function () {\n    function GraphTooltip() {\n        _classCallCheck(this, GraphTooltip);\n\n        this._visible = false;\n        this.$tooltip = $('<div class=\"graph-tooltip\">');\n    }\n\n    _createClass(GraphTooltip, [{\n        key: \"show\",\n        value: function show(pos, progressBars, mode) {\n            if (mode == panel_config_1.TooltipMode.NONE) {\n                return;\n            }\n            this._visible = true;\n            // TODO: use more vue/react approach here\n            // TODO: maybe wrap this rendering logic into classes\n            if (mode == panel_config_1.TooltipMode.SINGLE) {\n                var activeItem = _.find(progressBars, function (item) {\n                    return item.active;\n                });\n                var html = \"<div class=\\\"graph-tooltip-time\\\">Current value</div>\";\n                if (activeItem === undefined) {\n                    throw new Error('Can`t find any active item to show current value in tooltip');\n                }\n                html += progressBar2Html(activeItem);\n            } else if (mode == panel_config_1.TooltipMode.ALL_SERIES) {\n                // TODO: build this string faster\n                var html = progressBars.map(progressBar2Html).join('');\n            } else {\n                throw new Error('unknown tooltip type');\n            }\n            // TODO: move this \"20\" to a constant\n            // TODO: check how this work when `pos` is close to the page bottom edge\n            this.$tooltip.html(html).place_tt(pos.pageX + 20, pos.pageY).show();\n        }\n    }, {\n        key: \"hide\",\n        value: function hide() {\n            this._visible = false;\n            this.$tooltip.hide();\n        }\n    }, {\n        key: \"visible\",\n        get: function get() {\n            return this._visible;\n        }\n    }]);\n\n    return GraphTooltip;\n}();\n\nexports.GraphTooltip = GraphTooltip;\n/** VIEW **/\nfunction progressBar2Html(progressBar) {\n    return \"\\n    <div class=\\\"graph-tooltip-list-item\\\">\\n      <div class=\\\"graph-tooltip-series-name\\\">\\n        \" + (progressBar.active ? '<b>' : '') + \"\\n        \" + progressBar.title + \"\\n        \" + (progressBar.active ? '</b>' : '') + \"\\n      </div>\\n      \" + progressBarBars2Html(progressBar.bars) + \"\\n    </div>\\n  \";\n}\nfunction progressBarBars2Html(bars) {\n    return bars.map(function (bar) {\n        return \"\\n    <div class=\\\"graph-tooltip-value\\\">\\n      \" + bar.value + \"\\n    </div>\\n  \";\n    }).join('');\n}\n\n//# sourceURL=webpack:///./graph_tooltip.ts?");

/***/ }),

/***/ "./mapper.ts":
/*!*******************!*\
  !*** ./mapper.ts ***!
  \*******************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar progress_bar_1 = __webpack_require__(/*! ./progress_bar */ \"./progress_bar.ts\");\nvar panel_config_1 = __webpack_require__(/*! ./panel_config */ \"./panel_config.ts\");\nvar _ = __webpack_require__(/*! lodash */ \"lodash\");\n\nvar Mapper = function () {\n    function Mapper(panelConfig, templateSrv) {\n        _classCallCheck(this, Mapper);\n\n        this._panelConfig = panelConfig;\n        this._templateSrv = templateSrv;\n    }\n\n    _createClass(Mapper, [{\n        key: \"mapMetricData\",\n        value: function mapMetricData(seriesList) {\n            var _this = this;\n\n            var alias = this._panelConfig.getValue('alias');\n            if (seriesList === undefined || seriesList.length == 0) {\n                return [];\n            }\n            if (seriesList[0].columns === undefined) {\n                throw new Error('\"Time Series\" queries are not supported, please make sure to select \"Table\" and query at least 2 metrics');\n            }\n            var keys = seriesList[0].columns.map(function (col) {\n                return col.text;\n            });\n            var keyColumn = this._panelConfig.getValue('keyColumn');\n            var keyIndex = 0;\n            if (keyColumn !== '') {\n                keyIndex = keys.findIndex(function (key) {\n                    return key === keyColumn;\n                });\n            }\n            var skipIndexes = [keyIndex];\n            var skipColumns = this._panelConfig.getValue('skipColumns');\n            skipColumns.forEach(function (column) {\n                var index = keys.findIndex(function (key) {\n                    return key === column;\n                });\n                if (index >= 0) {\n                    skipIndexes.push(index);\n                }\n            });\n            var rowsMaxes = seriesList[0].rows.map(function (row) {\n                return _.sum(row.filter(function (value, idx) {\n                    return !_.includes(skipIndexes, idx);\n                }));\n            });\n            var totalMaxValue = _.max(rowsMaxes);\n            var filteredKeys = keys.filter(function (key, idx) {\n                return !_.includes(skipIndexes, idx);\n            });\n            // TODO: it's wrong, we return a bad type here\n            return seriesList[0].rows.map(function (row) {\n                var title = row[keyIndex];\n                if (alias !== '') {\n                    var scopedVars = {\n                        __key: { value: title }\n                    };\n                    title = _this._templateSrv.replace(alias, scopedVars);\n                }\n                return new progress_bar_1.ProgressBar(_this._panelConfig, title, filteredKeys, row.filter(function (value, idx) {\n                    return !_.includes(skipIndexes, idx);\n                }), totalMaxValue);\n            });\n        }\n    }, {\n        key: \"_mapKeysTotal\",\n        value: function _mapKeysTotal(seriesList) {\n            if (seriesList.length !== 1) {\n                throw new Error('Expecting list of keys: got more than one timeseries');\n            }\n            var kv = {};\n            var datapointsLength = seriesList[0].datapoints.length;\n            for (var i = 0; i < datapointsLength; i++) {\n                var k = seriesList[0].datapoints[i][0].toString();\n                if (kv[k] === undefined) {\n                    kv[k] = 0;\n                }\n                kv[k]++;\n            }\n            var res = [];\n            for (var _k in kv) {\n                res.push([_k, kv[_k]]);\n            }\n            return res;\n        }\n    }, {\n        key: \"_mapNumeric\",\n        value: function _mapNumeric(seriesList, statType, nullMapping) {\n            if (seriesList.length != 2) {\n                throw new Error('Expecting timeseries in format (key, value). You can use keys only in total mode');\n            }\n            if (seriesList[0].datapoints.length !== seriesList[1].datapoints.length) {\n                throw new Error('Timeseries has different length');\n            }\n            var kv = {};\n            var datapointsLength = seriesList[0].datapoints.length;\n            for (var i = 0; i < datapointsLength; i++) {\n                var k = seriesList[0].datapoints[i][0].toString();\n                var v = seriesList[1].datapoints[i][0];\n                var vn = parseFloat(v);\n                if (v === null) {\n                    if (nullMapping === undefined || nullMapping === null) {\n                        throw new Error('Got null value. You set null value mapping in Options -> Mapping -> Null');\n                    }\n                    console.log('nullMapping ->' + nullMapping);\n                    vn = nullMapping;\n                }\n                if (isNaN(vn)) {\n                    throw new Error('Got non-numberic value: ' + v);\n                }\n                if (kv[k] === undefined) {\n                    kv[k] = [];\n                }\n                kv[k].push(vn);\n            }\n            var res = [];\n            for (var _k2 in kv) {\n                res.push([_k2, this._flatSeries(kv[_k2], statType)]);\n            }\n            return res;\n        }\n    }, {\n        key: \"_mapTargetToDatapoints\",\n        value: function _mapTargetToDatapoints(seriesList, statType) {\n            var _this2 = this;\n\n            return seriesList.map(function (serie) {\n                return [serie.target, _this2._flatSeries(serie.datapoints.map(function (datapoint) {\n                    return datapoint[0];\n                }), statType)];\n            });\n        }\n    }, {\n        key: \"_flatSeries\",\n        value: function _flatSeries(values, statType) {\n            if (values.length === 0) {\n                return 0;\n            }\n            if (statType === panel_config_1.StatType.TOTAL) {\n                return _.sum(values);\n            }\n            if (statType === panel_config_1.StatType.MAX) {\n                return _.max(values);\n            }\n            if (statType === panel_config_1.StatType.MIN) {\n                return _.min(values);\n            }\n            if (statType === panel_config_1.StatType.CURRENT) {\n                return _.last(values);\n            }\n            return 0;\n        }\n    }]);\n\n    return Mapper;\n}();\n\nexports.Mapper = Mapper;\n\n//# sourceURL=webpack:///./mapper.ts?");

/***/ }),

/***/ "./module.ts":
/*!*******************!*\
  !*** ./module.ts ***!
  \*******************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar graph_tooltip_1 = __webpack_require__(/*! ./graph_tooltip */ \"./graph_tooltip.ts\");\nvar PanelConfig = __webpack_require__(/*! ./panel_config */ \"./panel_config.ts\");\nvar mapper_1 = __webpack_require__(/*! ./mapper */ \"./mapper.ts\");\nvar sdk_1 = __webpack_require__(/*! grafana/app/plugins/sdk */ \"grafana/app/plugins/sdk\");\nvar _ = __webpack_require__(/*! lodash */ \"lodash\");\nvar ERROR_MAPPING = \"\\n  Can't map the received metrics, see \\n  <strong>\\n    <a href=\\\"https://github.com/CorpGlory/grafana-progress-list/wiki\\\">wiki</a>\\n  </strong>\\n\";\nvar ERROR_NO_DATA = \"no data\";\n\nvar Ctrl = function (_sdk_1$MetricsPanelCt) {\n    _inherits(Ctrl, _sdk_1$MetricsPanelCt);\n\n    function Ctrl($scope, $injector, templateSrv) {\n        _classCallCheck(this, Ctrl);\n\n        var _this = _possibleConstructorReturn(this, (Ctrl.__proto__ || Object.getPrototypeOf(Ctrl)).call(this, $scope, $injector));\n\n        _this.templateSrv = templateSrv;\n        _this.statNameOptions = _.values(PanelConfig.StatType);\n        // TODO: review these ooptions and make types in PanelConfig\n        _this.statProgressTypeOptions = ['max value', 'shared'];\n        _this.coloringTypeOptions = _.values(PanelConfig.ColoringType);\n        _this.titleViewTypeOptions = _.values(PanelConfig.TitleViewOptions);\n        _this.sortingOrderOptions = ['none', 'increasing', 'decreasing'];\n        _this.valueLabelTypeOptions = _.values(PanelConfig.ValueLabelType);\n        _this.tooltipModeOptions = _.values(PanelConfig.TooltipMode);\n        // used to show status messages replacing rendered graphics\n        // see isPanelAlert and panelAlertMessage\n        _this._panelAlert = {\n            active: true,\n            // message prop can be formatted with html,\n            message: '<strong>loading...</strong>' // loading will be showed only once at the beginning\n            // would be nice to add `type` property with values ['info', 'warning', 'error']\n            // and then move it https://github.com/chartwerk/grafana-panel-base/issues/1\n        };\n        _.defaults(_this.panel, PanelConfig.DEFAULTS);\n        _this._panelConfig = new PanelConfig.PanelConfig(_this.panel);\n        _this._initStyles();\n        _this.mapper = new mapper_1.Mapper(_this._panelConfig, _this.templateSrv);\n        _this.progressBars = [];\n        _this._tooltip = new graph_tooltip_1.GraphTooltip();\n        _this.events.on('init-edit-mode', _this._onInitEditMode.bind(_this));\n        _this.events.on('data-received', _this._onDataReceived.bind(_this));\n        _this.events.on('render', _this._onRender.bind(_this));\n        return _this;\n    }\n\n    _createClass(Ctrl, [{\n        key: \"_initStyles\",\n        value: function _initStyles() {\n            // small hack to load base styles\n            var cssPath = this._panelConfig.pluginDirName.replace('public/', '');\n            sdk_1.loadPluginCss({\n                light: cssPath + 'css/panel.base.css',\n                dark: cssPath + 'css/panel.base.css'\n            });\n            sdk_1.loadPluginCss({\n                light: cssPath + 'css/panel.light.css',\n                dark: cssPath + 'css/panel.dark.css'\n            });\n        }\n    }, {\n        key: \"_onRender\",\n        value: function _onRender() {\n            // maybe we want to make a config \"last value\" instead of ERROR_NO_DATA\n            // see https://github.com/chartwerk/grafana-panel-base/issues/3\n            if (this._seriesList === undefined || this._seriesList.length === 0) {\n                this._panelAlert.active = true;\n                this._panelAlert.message = ERROR_NO_DATA;\n                return;\n            }\n            try {\n                // TODO: set this.items also\n                this.progressBars = this.mapper.mapMetricData(this._seriesList);\n            } catch (e) {\n                this._panelAlert.active = true;\n                this._panelAlert.message = ERROR_MAPPING + \"<br/><p class=\\\"error\\\">\" + e + \"</p>\";\n                return;\n            }\n            if (this._panelConfig.getValue('sortingOrder') === 'increasing') {\n                this.progressBars = _.sortBy(this.progressBars, function (i) {\n                    return i.aggregatedProgress;\n                });\n            }\n            if (this._panelConfig.getValue('sortingOrder') === 'decreasing') {\n                this.progressBars = _.sortBy(this.progressBars, function (i) {\n                    return -i.aggregatedProgress;\n                });\n            }\n            this.progressBars = _.take(this.progressBars, this._panelConfig.getValue('limit'));\n            if (this._tooltip.visible) {\n                if (this._lastHoverEvent === undefined) {\n                    throw new Error('Need to show tooltip because it`s visible, but don`t have previous state');\n                }\n                this.onHover(this._lastHoverEvent);\n            }\n            this._panelAlert.active = false;\n        }\n    }, {\n        key: \"onValueLabelTypeChange\",\n        value: function onValueLabelTypeChange() {\n            this.updatePostfix();\n            this._onRender();\n        }\n    }, {\n        key: \"onAddSkipColumnClick\",\n        value: function onAddSkipColumnClick() {\n            this.panel.skipColumns.push('');\n        }\n    }, {\n        key: \"onRemoveSkipColumnClick\",\n        value: function onRemoveSkipColumnClick(index) {\n            this.panel.skipColumns.splice(index, 1);\n            this.render();\n        }\n    }, {\n        key: \"updatePostfix\",\n        value: function updatePostfix() {\n            var valueLabelType = this._panelConfig.getValue('valueLabelType');\n            var postfixValue = this.panel.postfix;\n            switch (valueLabelType) {\n                case PanelConfig.ValueLabelType.ABSOLUTE:\n                    if (postfixValue === '%') {\n                        this.panel.postfix = '';\n                    }\n                    break;\n                case PanelConfig.ValueLabelType.PERCENTAGE:\n                    if (postfixValue === '') {\n                        this.panel.postfix = '%';\n                    }\n                    break;\n                default:\n                    throw new Error(\"Unknown value label type: \" + valueLabelType);\n            }\n        }\n    }, {\n        key: \"onHover\",\n        value: function onHover(event) {\n            this._clearActiveProgressBar();\n            this._lastHoverEvent = event; // TODO: use it to unset active previous progressbar\n            this.progressBars[event.index].active = true;\n            this._tooltip.show(event.event, this.progressBars, this.panel.tooltipMode);\n        }\n    }, {\n        key: \"_clearActiveProgressBar\",\n        value: function _clearActiveProgressBar() {\n            if (this._lastHoverEvent !== undefined && this._lastHoverEvent.index < this.progressBars.length) {\n                this.progressBars[this._lastHoverEvent.index].active = false;\n            }\n        }\n    }, {\n        key: \"onMouseLeave\",\n        value: function onMouseLeave() {\n            this._clearActiveProgressBar();\n            this._tooltip.hide();\n        }\n    }, {\n        key: \"_onDataReceived\",\n        value: function _onDataReceived(seriesList) {\n            this._seriesList = seriesList;\n            this.render();\n        }\n    }, {\n        key: \"_onInitEditMode\",\n        value: function _onInitEditMode() {\n            var thisPartialPath = this._panelConfig.pluginDirName + 'partials/';\n            this.addEditorTab('Options', thisPartialPath + 'options.html', 2);\n        }\n    }, {\n        key: \"invertColorOrder\",\n        value: function invertColorOrder() {\n            var tmp = this.panel.colors[0];\n            this.panel.colors[0] = this.panel.colors[2];\n            this.panel.colors[2] = tmp;\n            this.render();\n        }\n    }, {\n        key: \"addColorKeyMapping\",\n        value: function addColorKeyMapping() {\n            this.panel.colorKeyMappings.push({\n                key: 'KEY_NAME',\n                color: 'rgba(50, 172, 45, 0.97)'\n            });\n        }\n    }, {\n        key: \"removeColorKeyMapping\",\n        value: function removeColorKeyMapping(index) {\n            this.panel.colorKeyMappings.splice(index, 1);\n            this.render();\n        }\n    }, {\n        key: \"_dataError\",\n        value: function _dataError(err) {\n            console.log('got data error');\n            console.log(err);\n            // TODO: reveiew this logic\n            this.$scope.data = [];\n            this.$scope.dataError = err;\n        }\n    }, {\n        key: \"columns\",\n        get: function get() {\n            if (this._seriesList === undefined || this._seriesList.length === 0 || this._seriesList[0].columns === undefined) {\n                return [];\n            }\n            return this._seriesList[0].columns.map(function (col) {\n                return col.text;\n            });\n        }\n    }, {\n        key: \"isPanelAlert\",\n        get: function get() {\n            return this._panelAlert.active;\n        }\n        // the field will be rendered as html\n\n    }, {\n        key: \"panelAlertMessage\",\n        get: function get() {\n            return this._panelAlert.message;\n        }\n    }]);\n\n    return Ctrl;\n}(sdk_1.MetricsPanelCtrl);\n\nCtrl.templateUrl = 'partials/template.html';\nexports.PanelCtrl = Ctrl;\n\n//# sourceURL=webpack:///./module.ts?");

/***/ }),

/***/ "./panel_config.ts":
/*!*************************!*\
  !*** ./panel_config.ts ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar StatType;\n(function (StatType) {\n    StatType[\"CURRENT\"] = \"current\";\n    StatType[\"MIN\"] = \"min\";\n    StatType[\"MAX\"] = \"max\";\n    StatType[\"TOTAL\"] = \"total\";\n})(StatType = exports.StatType || (exports.StatType = {}));\n;\nvar TitleViewOptions;\n(function (TitleViewOptions) {\n    TitleViewOptions[\"SEPARATE_TITLE_LINE\"] = \"Separate title line\";\n    TitleViewOptions[\"INLINE\"] = \"Inline\";\n})(TitleViewOptions = exports.TitleViewOptions || (exports.TitleViewOptions = {}));\n;\nvar ColoringType;\n(function (ColoringType) {\n    ColoringType[\"PALLETE\"] = \"pallete\";\n    ColoringType[\"THRESHOLDS\"] = \"thresholds\";\n    ColoringType[\"KEY_MAPPING\"] = \"key mapping\";\n})(ColoringType = exports.ColoringType || (exports.ColoringType = {}));\nvar ValueLabelType;\n(function (ValueLabelType) {\n    ValueLabelType[\"PERCENTAGE\"] = \"percentage\";\n    ValueLabelType[\"ABSOLUTE\"] = \"absolute\";\n})(ValueLabelType = exports.ValueLabelType || (exports.ValueLabelType = {}));\nvar TooltipMode;\n(function (TooltipMode) {\n    TooltipMode[\"NONE\"] = \"none\";\n    TooltipMode[\"SINGLE\"] = \"single\";\n    TooltipMode[\"ALL_SERIES\"] = \"all series\";\n})(TooltipMode = exports.TooltipMode || (exports.TooltipMode = {}));\n;\nexports.DEFAULTS = {\n    keyColumn: '',\n    skipColumns: [],\n    statNameOptionValue: StatType.CURRENT,\n    statProgressMaxValue: null,\n    coloringType: ColoringType.PALLETE,\n    titleViewType: TitleViewOptions.SEPARATE_TITLE_LINE,\n    sortingOrder: 'none',\n    valueLabelType: ValueLabelType.ABSOLUTE,\n    alias: '',\n    prefix: '',\n    postfix: '',\n    thresholds: '10, 30',\n    // https://github.com/grafana/grafana/blob/v4.1.1/public/app/plugins/panel/singlestat/module.ts#L57\n    colors: ['rgba(245, 54, 54, 0.9)', 'rgba(237, 129, 40, 0.89)', 'rgba(50, 172, 45, 0.97)'],\n    colorsKeyMappingDefault: 'rgba(245, 54, 54, 0.9)',\n    colorKeyMappings: [],\n    nullMapping: undefined,\n    tooltipMode: TooltipMode.ALL_SERIES,\n    opacity: 0.5,\n    limit: 50\n};\n\nvar PanelConfig = function () {\n    function PanelConfig(panel) {\n        _classCallCheck(this, PanelConfig);\n\n        this._panel = panel;\n        // migrations\n        if (this.getValue('coloringType') === 'auto') {\n            this.setValue('coloringType', ColoringType.PALLETE);\n        }\n        var skipColumn = this.getValue('skipColumn');\n        if (skipColumn !== undefined && skipColumn !== '') {\n            this.setValue('skipColumn', undefined);\n            this.setValue('skipColumns', [skipColumn]);\n        }\n    }\n\n    _createClass(PanelConfig, [{\n        key: \"getValue\",\n        value: function getValue(key) {\n            return this._panel[key];\n        }\n    }, {\n        key: \"setValue\",\n        value: function setValue(key, value) {\n            this._panel[key] = value;\n        }\n    }, {\n        key: \"pluginDirName\",\n        get: function get() {\n            if (!this._pluginDirName) {\n                var panels = window['grafanaBootData'].settings.panels;\n                var thisPanel = panels[this._panel.type];\n                // the system loader preprends publib to the url,\n                // add a .. to go back one level\n                this._pluginDirName = thisPanel.baseUrl + '/';\n            }\n            return this._pluginDirName;\n        }\n    }]);\n\n    return PanelConfig;\n}();\n\nexports.PanelConfig = PanelConfig;\n\n//# sourceURL=webpack:///./panel_config.ts?");

/***/ }),

/***/ "./progress_bar.ts":
/*!*************************!*\
  !*** ./progress_bar.ts ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar panel_config_1 = __webpack_require__(/*! ./panel_config */ \"./panel_config.ts\");\nvar value_formatter_1 = __webpack_require__(/*! ./value_formatter */ \"./value_formatter.ts\");\nvar _ = __webpack_require__(/*! lodash */ \"lodash\");\nvar Position;\n(function (Position) {\n    Position[\"STATIC\"] = \"static\";\n    Position[\"ABSOLUTE\"] = \"absolute\";\n})(Position || (Position = {}));\n/**\n * Model for the main component of the app -- bars, but it's not just a Bar,\n * it also keeps all small \"bars\", title and metainfo\n */\n\nvar ProgressBar = function () {\n    function ProgressBar(_panelConfig, _title, _keys, // maybe \"_names\" is better than \"_keys\"\n    _values, _maxTotalValue) {\n        _classCallCheck(this, ProgressBar);\n\n        this._panelConfig = _panelConfig;\n        this._title = _title;\n        this._keys = _keys;\n        this._values = _values;\n        this._maxTotalValue = _maxTotalValue;\n        if (this._keys.length !== this._values.length) {\n            throw new Error('keys amount should be equal to values amount');\n        }\n        this._bars = [];\n        for (var i = 0; i < _keys.length; ++i) {\n            this._bars.push({\n                name: this._keys[i],\n                value: this._values[i],\n                color: mapValue2Color(this._values[i], this._keys[i], i, this._panelConfig)\n            });\n        }\n        // bad code starts:\n    }\n\n    _createClass(ProgressBar, [{\n        key: \"active\",\n        get: function get() {\n            return this._active;\n        },\n        set: function set(value) {\n            this._active = value;\n        }\n    }, {\n        key: \"title\",\n        get: function get() {\n            return this._title;\n        }\n    }, {\n        key: \"keys\",\n        get: function get() {\n            return this._keys;\n        }\n    }, {\n        key: \"values\",\n        get: function get() {\n            return this._values;\n        }\n    }, {\n        key: \"bars\",\n        get: function get() {\n            return this._bars;\n        }\n    }, {\n        key: \"sumOfValues\",\n        get: function get() {\n            return _.sum(this.values);\n        }\n    }, {\n        key: \"percentValues\",\n        get: function get() {\n            var _this = this;\n\n            return this.values.map(function (value) {\n                return value / _this.sumOfValues * 100;\n            });\n        }\n    }, {\n        key: \"aggregatedProgress\",\n        get: function get() {\n            return this.sumOfValues / this._maxTotalValue * 100;\n        }\n    }, {\n        key: \"totalValue\",\n        get: function get() {\n            var valueLabelType = this._panelConfig.getValue('valueLabelType');\n            switch (valueLabelType) {\n                case panel_config_1.ValueLabelType.ABSOLUTE:\n                    return this.sumOfValues;\n                case panel_config_1.ValueLabelType.PERCENTAGE:\n                    return this.aggregatedProgress;\n                default:\n                    throw new Error(\"Unknown value label type: \" + valueLabelType);\n            }\n        }\n    }, {\n        key: \"formattedTotalValue\",\n        get: function get() {\n            return value_formatter_1.getFormattedValue(this.totalValue, this._panelConfig.getValue('prefix'), this._panelConfig.getValue('postfix'), this._panelConfig.getValue('decimals'));\n        }\n    }, {\n        key: \"colors\",\n        get: function get() {\n            return _.map(this._bars, function (bar) {\n                return bar.color;\n            });\n        }\n        // it should go somewhere to view\n\n    }, {\n        key: \"titleParams\",\n        get: function get() {\n            var titleType = this._panelConfig.getValue('titleViewType');\n            switch (titleType) {\n                case panel_config_1.TitleViewOptions.SEPARATE_TITLE_LINE:\n                    return {\n                        barHeight: 8,\n                        titleHeight: 16,\n                        position: Position.STATIC\n                    };\n                case panel_config_1.TitleViewOptions.INLINE:\n                    return {\n                        barHeight: 24,\n                        titleHeight: 24,\n                        position: Position.ABSOLUTE\n                    };\n                default:\n                    throw new Error(\"Wrong titleType: \" + titleType);\n            }\n        }\n    }, {\n        key: \"opacity\",\n        get: function get() {\n            return this._panelConfig.getValue('opacity');\n        }\n    }]);\n\n    return ProgressBar;\n}();\n\nexports.ProgressBar = ProgressBar;\n/** VIEW **/\nfunction mapValue2Color(value, key, index, _panelConfig) {\n    var colorType = _panelConfig.getValue('coloringType');\n    var colors = _panelConfig.getValue('colors');\n    switch (colorType) {\n        case panel_config_1.ColoringType.PALLETE:\n            return colors[index % colors.length];\n        case panel_config_1.ColoringType.THRESHOLDS:\n            // TODO: parse only once\n            var thresholds = _panelConfig.getValue('thresholds').split(',').map(parseFloat);\n            if (colors.length <= thresholds.length) {\n                // we add one because a threshold is a cut of the range of values\n                throw new Error('Number of colors must be at least as number as threasholds + 1');\n            }\n            for (var i = thresholds.length; i > 0; i--) {\n                if (value >= thresholds[i - 1]) {\n                    return colors[i];\n                }\n            }\n            return colors[0];\n        case panel_config_1.ColoringType.KEY_MAPPING:\n            var colorKeyMappings = _panelConfig.getValue('colorKeyMappings');\n            var keyColorMapping = _.find(colorKeyMappings, function (k) {\n                return k.key === key;\n            });\n            if (keyColorMapping === undefined) {\n                return _panelConfig.getValue('colorsKeyMappingDefault');\n            }\n            return keyColorMapping.color;\n        default:\n            throw new Error('Unknown color type ' + colorType);\n    }\n}\n\n//# sourceURL=webpack:///./progress_bar.ts?");

/***/ }),

/***/ "./value_formatter.ts":
/*!****************************!*\
  !*** ./value_formatter.ts ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar _ = __webpack_require__(/*! lodash */ \"lodash\");\nfunction getFormattedValue(value, prefix, postfix, decimals) {\n    return \"\" + prefix + getFormattedFloat(value, decimals) + postfix;\n}\nexports.getFormattedValue = getFormattedValue;\nfunction getFormattedFloat(value, decimals) {\n    var dm = getDecimalsForValue(value, decimals).decimals;\n    if (dm === 0) {\n        return Math.round(value).toString();\n    }\n    var fv = value;\n    for (var i = 0; i < dm; i++) {\n        fv *= 10;\n    }\n    ;\n    var fvs = Math.round(fv).toString();\n    return fvs.substr(0, fvs.length - dm) + '.' + fvs.substr(fvs.length - dm);\n}\nfunction getDecimalsForValue(value, decimals) {\n    // based on https://github.com/grafana/grafana/blob/v4.1.1/public/app/plugins/panel/singlestat/module.ts\n    if (_.isNumber(decimals)) {\n        return {\n            decimals: decimals,\n            scaledDecimals: null\n        };\n    }\n    var delta = value / 2;\n    var dec = -Math.floor(Math.log(delta) / Math.LN10);\n    var magn = Math.pow(10, -dec),\n        norm = delta / magn,\n        // norm is between 1.0 and 10.0\n    size = void 0;\n    if (norm < 1.5) {\n        size = 1;\n    } else if (norm < 3) {\n        size = 2;\n        // special case for 2.5, requires an extra decimal\n        if (norm > 2.25) {\n            size = 2.5;\n            ++dec;\n        }\n    } else if (norm < 7.5) {\n        size = 5;\n    } else {\n        size = 10;\n    }\n    size *= magn;\n    // reduce starting decimals if not needed\n    if (Math.floor(value) === value) {\n        dec = 0;\n    }\n    var result = {};\n    result.decimals = Math.max(0, dec);\n    result.scaledDecimals = result.decimals - Math.floor(Math.log(size) / Math.LN10) + 2;\n    return result;\n}\n\n//# sourceURL=webpack:///./value_formatter.ts?");

/***/ }),

/***/ "grafana/app/plugins/sdk":
/*!**********************************!*\
  !*** external "app/plugins/sdk" ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = __WEBPACK_EXTERNAL_MODULE_grafana_app_plugins_sdk__;\n\n//# sourceURL=webpack:///external_%22app/plugins/sdk%22?");

/***/ }),

/***/ "lodash":
/*!*************************!*\
  !*** external "lodash" ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = __WEBPACK_EXTERNAL_MODULE_lodash__;\n\n//# sourceURL=webpack:///external_%22lodash%22?");

/***/ })

/******/ })});;