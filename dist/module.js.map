{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./graph_tooltip.ts","webpack:///./mapper.ts","webpack:///./module.ts","webpack:///./panel_config.ts","webpack:///./progress_bar.ts","webpack:///./value_formatter.ts","webpack:///external \"app/plugins/sdk\"","webpack:///external \"lodash\""],"names":[],"mappings":"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","file":"module.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading wasm modules\n \tvar installedWasmModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// object with all compiled WebAssembly.Modules\n \t__webpack_require__.w = {};\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./module.ts\");\n","import * as _ from 'lodash';\n\nimport { Bar, ProgressBar } from './progress_bar'\nimport { TooltipMode } from './panel_config';\n\n\nexport type Position = {\n  pageX: number,\n  pageY: number\n};\n\n// TODO: check if we need this\nexport type Serie = {\n  datapoints: [number, number][],\n  target: string,\n  alias?: string\n};\n\nexport class GraphTooltip {\n\n  private $tooltip: JQuery<HTMLElement>;\n  private _visible = false;\n\n  constructor() {\n    this.$tooltip = $('<div class=\"graph-tooltip\">');\n  }\n\n  show(pos: Position, progressBars: ProgressBar[], mode: TooltipMode): void {\n    if(mode == TooltipMode.NONE) {\n      return;\n    }\n    this._visible = true;\n    // TODO: use more vue/react approach here\n    // TODO: maybe wrap this rendering logic into classes\n    if(mode == TooltipMode.SINGLE) {\n      let activeItem = _.find(progressBars, item => item.active);\n      var html = `<div class=\"graph-tooltip-time\">Current value</div>`;\n      if(activeItem === undefined) {\n        throw new Error(\n          'Can`t find any active item to show current value in tooltip'\n        );\n      }\n      html += progressBar2Html(activeItem);\n    } else if (mode == TooltipMode.ALL_SERIES) {\n      // TODO: build this string faster\n      var html = progressBars.map(progressBar2Html).join('');\n    } else {\n      throw new Error('unknown tooltip type');\n    }\n\n    // TODO: move this \"20\" to a constant\n    // TODO: check how this work when `pos` is close to the page bottom edge\n    (this.$tooltip.html(html) as any).place_tt(pos.pageX + 20, pos.pageY).show();\n  }\n\n  hide(): void {\n    this._visible = false;\n    this.$tooltip.hide();\n  }\n\n  get visible(): boolean { return this._visible; }\n\n}\n\n/** VIEW **/\n\nfunction progressBar2Html(progressBar: ProgressBar): string {\n  return `\n    <div class=\"graph-tooltip-list-item\">\n      <div class=\"graph-tooltip-series-name\">\n        ${progressBar.active ? '<b>' : ''}\n        ${progressBar.title}\n        ${progressBar.active ? '</b>' : ''}\n      </div>\n      ${progressBarBars2Html(progressBar.bars)}\n    </div>\n  `;\n}\n\nfunction progressBarBars2Html(bars: Bar[]): string {\n  return bars.map(bar => `\n    <div class=\"graph-tooltip-value\">\n      ${bar.value}\n    </div>\n  `).join('');\n}\n","import { ProgressBar } from './progress_bar';\nimport { PanelConfig, StatType } from './panel_config';\n\n\nimport * as _ from 'lodash';\n\n\ntype KeyValue = [string, number];\n\n\nexport class Mapper {\n\n  private _panelConfig: PanelConfig;\n  private _templateSrv: any;\n\n  constructor(panelConfig: PanelConfig, templateSrv: any) {\n    this._panelConfig = panelConfig;\n    this._templateSrv = templateSrv;\n  }\n\n  mapMetricData(seriesList: any): ProgressBar[] {\n    const alias = this._panelConfig.getValue('alias');\n\n    if(seriesList === undefined || seriesList.length == 0) {\n      return [];\n    }\n\n    if(seriesList[0].columns === undefined) {\n      throw new Error('\"Time Series\" queries are not supported, please make sure to select \"Table\" and query at least 2 metrics');\n    }\n\n    let keys = seriesList[0].columns.map(col => col.text);\n\n    const keyColumn = this._panelConfig.getValue('keyColumn');\n    let keyIndex = 0;\n    if(keyColumn !== '') {\n      keyIndex = keys.findIndex(key => key === keyColumn);\n    }\n\n    let skipIndexes: number[] = [keyIndex];\n    const skipColumns = this._panelConfig.getValue('skipColumns');\n    skipColumns.forEach(column => {\n      const index = keys.findIndex(key => key === column);\n      if(index >= 0) {\n        skipIndexes.push(index);\n      }\n    });\n\n    const rowsMaxes =  seriesList[0].rows.map(\n      row => _.sum(\n        row.filter((value, idx) => !_.includes(skipIndexes, idx))\n      )\n    );\n    const totalMaxValue = _.max(rowsMaxes);\n\n    const filteredKeys = keys.filter((key, idx) => !_.includes(skipIndexes, idx));\n    // TODO: it's wrong, we return a bad type here\n    return seriesList[0].rows.map(\n      row => {\n        let title = row[keyIndex];\n        if(alias !== '') {\n          const scopedVars = {\n            __key: { value: title }\n          };\n          title = this._templateSrv.replace(alias, scopedVars);\n        }\n\n        return new ProgressBar(\n          this._panelConfig,\n          title,\n          filteredKeys,\n          row.filter((value, idx) => !_.includes(skipIndexes, idx)),\n          totalMaxValue as number\n        )\n      }\n    );\n\n  }\n\n  _mapKeysTotal(seriesList): KeyValue[] {\n    if(seriesList.length !== 1) {\n      throw new Error('Expecting list of keys: got more than one timeseries');\n    }\n    var kv = {};\n    var datapointsLength = seriesList[0].datapoints.length;\n    for(let i = 0; i < datapointsLength; i++) {\n      let k = seriesList[0].datapoints[i][0].toString();\n      if(kv[k] === undefined) {\n        kv[k] = 0;\n      }\n      kv[k]++;\n    }\n\n    var res: KeyValue[] = [];\n    for(let k in kv) {\n      res.push([k, kv[k]]);\n    }\n\n    return res;\n\n  }\n\n  _mapNumeric(seriesList, statType: StatType, nullMapping): KeyValue[] {\n    if(seriesList.length != 2) {\n      throw new Error('Expecting timeseries in format (key, value). You can use keys only in total mode');\n    }\n    if(seriesList[0].datapoints.length !==  seriesList[1].datapoints.length) {\n      throw new Error('Timeseries has different length');\n    }\n\n    var kv = {};\n    var datapointsLength = seriesList[0].datapoints.length;\n\n    for(let i = 0; i < datapointsLength; i++) {\n      let k = seriesList[0].datapoints[i][0].toString();\n      let v = seriesList[1].datapoints[i][0];\n      let vn = parseFloat(v);\n      if(v === null) {\n        if(nullMapping === undefined || nullMapping === null) {\n          throw new Error('Got null value. You set null value mapping in Options -> Mapping -> Null');\n        }\n        console.log('nullMapping ->' + nullMapping);\n        vn = nullMapping;\n      }\n      if(isNaN(vn)) {\n        throw new Error('Got non-numberic value: ' + v);\n      }\n      if(kv[k] === undefined) {\n        kv[k] = [];\n      }\n      kv[k].push(vn);\n    }\n\n    var res: KeyValue[] = [];\n    for(let k in kv) {\n      res.push([k, this._flatSeries(kv[k], statType)]);\n    }\n\n    return res;\n  }\n\n  _mapTargetToDatapoints(seriesList, statType: StatType): KeyValue[] {\n    return seriesList.map(serie => [\n      serie.target,\n      this._flatSeries(serie.datapoints.map(datapoint => datapoint[0]), statType)\n    ]);\n  }\n\n  _flatSeries(values: number[], statType: StatType): number {\n    if(values.length === 0) {\n      return 0;\n    }\n\n    if(statType === StatType.TOTAL) {\n      return _.sum(values);\n    }\n\n    if(statType === StatType.MAX) {\n      return _.max(values) as number;\n    }\n\n    if(statType === StatType.MIN) {\n      return _.min(values) as number;\n    }\n\n    if(statType === StatType.CURRENT) {\n      return _.last(values) as number;\n    }\n\n    return 0;\n  }\n}\n","import { GraphTooltip } from './graph_tooltip';\nimport * as PanelConfig from './panel_config';\nimport { Mapper } from './mapper';\nimport { ProgressBar } from './progress_bar';\n\nimport { MetricsPanelCtrl, loadPluginCss } from 'grafana/app/plugins/sdk';\n\nimport * as _ from 'lodash';\n\nexport type HoverEvent = {\n  index: number,\n  event: any\n}\n\nconst ERROR_MAPPING = `\n  Can't map the received metrics, see \n  <strong>\n    <a href=\"https://github.com/CorpGlory/grafana-progress-list/wiki\">wiki</a>\n  </strong>\n`;\nconst ERROR_NO_DATA = \"no data\";\n\nclass Ctrl extends MetricsPanelCtrl {\n  static templateUrl = 'partials/template.html';\n\n  public mapper: Mapper;\n\n  // TODO: rename progressBars\n  public progressBars: ProgressBar[];\n\n  private _panelConfig: PanelConfig.PanelConfig;\n\n  private _seriesList: any;\n\n  private _tooltip: GraphTooltip;\n\n  private statNameOptions = _.values(PanelConfig.StatType);\n  // TODO: review these ooptions and make types in PanelConfig\n  private statProgressTypeOptions = [ 'max value', 'shared' ];\n  \n  private coloringTypeOptions = _.values(PanelConfig.ColoringType);\n\n  private titleViewTypeOptions = _.values(PanelConfig.TitleViewOptions);\n  private sortingOrderOptions = [ 'none', 'increasing', 'decreasing' ];\n  private valueLabelTypeOptions = _.values(PanelConfig.ValueLabelType);\n  private tooltipModeOptions = _.values(PanelConfig.TooltipMode);\n\n  // field for updating tooltip on rendering and storing previous state\n  private _lastHoverEvent?: HoverEvent;\n\n  // used to show status messages replacing rendered graphics\n  // see isPanelAlert and panelAlertMessage\n  private _panelAlert = {\n    active: true,\n    // message prop can be formatted with html,\n    message: '<strong>loading...</strong>' // loading will be showed only once at the beginning\n\n    // would be nice to add `type` property with values ['info', 'warning', 'error']\n    // and then move it https://github.com/chartwerk/grafana-panel-base/issues/1\n  };\n\n  constructor($scope: any, $injector: any, public templateSrv: any) {\n    super($scope, $injector);\n\n    _.defaults(this.panel, PanelConfig.DEFAULTS);\n\n    this._panelConfig = new PanelConfig.PanelConfig(this.panel);\n    this._initStyles();\n\n    this.mapper = new Mapper(this._panelConfig, this.templateSrv);\n    this.progressBars = [];\n    this._tooltip = new GraphTooltip();\n\n    this.events.on('init-edit-mode', this._onInitEditMode.bind(this));\n    this.events.on('data-received', this._onDataReceived.bind(this));\n    this.events.on('render', this._onRender.bind(this));\n  }\n\n  _initStyles() {\n    // small hack to load base styles\n    const cssPath = this._panelConfig.pluginDirName.replace('public/', '');\n    loadPluginCss({\n      light: cssPath + 'css/panel.base.css',\n      dark: cssPath + 'css/panel.base.css'\n    });\n    loadPluginCss({\n      light: cssPath + 'css/panel.light.css',\n      dark: cssPath + 'css/panel.dark.css'\n    });\n  }\n\n  _onRender() {\n    // maybe we want to make a config \"last value\" instead of ERROR_NO_DATA\n    // see https://github.com/chartwerk/grafana-panel-base/issues/3\n    if(this._seriesList === undefined || this._seriesList.length === 0) {\n      this._panelAlert.active = true;\n      this._panelAlert.message = ERROR_NO_DATA;\n      return;\n    }\n    try {\n      // TODO: set this.items also\n      this.progressBars = this.mapper.mapMetricData(this._seriesList);\n    } catch(e) {\n      this._panelAlert.active = true;\n      this._panelAlert.message = `${ERROR_MAPPING}<br/><p class=\"error\">${e}</p>`;\n      return;\n    }\n    if(this._panelConfig.getValue('sortingOrder') === 'increasing') {\n      this.progressBars = _.sortBy(this.progressBars, i => i.aggregatedProgress);\n    }\n    if(this._panelConfig.getValue('sortingOrder') === 'decreasing') {\n      this.progressBars = _.sortBy(this.progressBars, i => -i.aggregatedProgress);\n    }\n\n    this.progressBars = _.take(this.progressBars, this._panelConfig.getValue('limit'));\n\n    if(this._tooltip.visible) {\n      if(this._lastHoverEvent === undefined) {\n        throw new Error(\n          'Need to show tooltip because it`s visible, but don`t have previous state'\n        );\n      }\n      this.onHover(this._lastHoverEvent);\n    }\n    this._panelAlert.active = false;\n  }\n\n  onValueLabelTypeChange(): void {\n    this.updatePostfix();\n    this._onRender();\n  }\n\n  onAddSkipColumnClick(): void {\n    this.panel.skipColumns.push('');\n  }\n\n  onRemoveSkipColumnClick(index: number): void {\n    this.panel.skipColumns.splice(index, 1);\n    this.render();\n  }\n\n  updatePostfix(): void {\n    const valueLabelType = this._panelConfig.getValue('valueLabelType');\n    const postfixValue = this.panel.postfix;\n    switch(valueLabelType) {\n      case PanelConfig.ValueLabelType.ABSOLUTE:\n        if(postfixValue === '%') {\n          this.panel.postfix = '';\n        }\n        break;\n      case PanelConfig.ValueLabelType.PERCENTAGE:\n        if(postfixValue === '') {\n          this.panel.postfix = '%';\n        }\n        break;\n      default:\n        throw new Error(`Unknown value label type: ${valueLabelType}`);\n    }\n  }\n\n  onHover(event: HoverEvent) {\n    this._clearActiveProgressBar();\n    this._lastHoverEvent = event; // TODO: use it to unset active previous progressbar\n    this.progressBars[event.index].active = true;\n    this._tooltip.show(event.event, this.progressBars, this.panel.tooltipMode);\n  }\n\n  private _clearActiveProgressBar() {\n    if(\n      this._lastHoverEvent !== undefined &&\n      this._lastHoverEvent.index < this.progressBars.length\n    ) {\n      this.progressBars[this._lastHoverEvent.index].active = false;\n    }\n  }\n\n  onMouseLeave() {\n    this._clearActiveProgressBar();\n    this._tooltip.hide();\n  }\n\n  _onDataReceived(seriesList: any) {\n    this._seriesList = seriesList;\n    this.render();\n  }\n\n  _onInitEditMode() {\n    var thisPartialPath = this._panelConfig.pluginDirName + 'partials/';\n    this.addEditorTab('Options', thisPartialPath + 'options.html', 2);\n  }\n\n  invertColorOrder() {\n    var tmp = this.panel.colors[0];\n    this.panel.colors[0] = this.panel.colors[2];\n    this.panel.colors[2] = tmp;\n    this.render();\n  }\n\n  addColorKeyMapping() {\n    this.panel.colorKeyMappings.push({\n      key: 'KEY_NAME',\n      color: 'rgba(50, 172, 45, 0.97)'\n    });\n  }\n\n  removeColorKeyMapping(index) {\n    this.panel.colorKeyMappings.splice(index, 1);\n    this.render();\n  }\n\n  _dataError(err) {\n    console.log('got data error');\n    console.log(err);\n    // TODO: reveiew this logic\n    this.$scope.data = [];\n    this.$scope.dataError = err;\n  }\n\n  get columns(): string[] {\n    if(\n      this._seriesList === undefined ||\n      this._seriesList.length === 0 ||\n      this._seriesList[0].columns === undefined\n    ) {\n      return [];\n    }\n    return this._seriesList[0].columns.map(col => col.text);\n  }\n\n  get isPanelAlert(): boolean {\n    return this._panelAlert.active;\n  }\n\n  // the field will be rendered as html\n  get panelAlertMessage(): string {\n    return this._panelAlert.message;\n  }\n\n}\n\nexport { Ctrl as PanelCtrl }\n","export enum StatType {\n  CURRENT = 'current',\n  MIN = 'min',\n  MAX = 'max',\n  TOTAL = 'total'\n};\n\nexport enum TitleViewOptions {\n  SEPARATE_TITLE_LINE = 'Separate title line',\n  INLINE = 'Inline'\n};\n\nexport enum ColoringType {\n  PALLETE = 'pallete',\n  THRESHOLDS = 'thresholds',\n  KEY_MAPPING = 'key mapping'\n}\n\nexport enum ValueLabelType {\n  PERCENTAGE = 'percentage',\n  ABSOLUTE = 'absolute'\n}\n\nexport enum TooltipMode {\n  NONE = 'none',\n  SINGLE = 'single',\n  ALL_SERIES = 'all series'\n};\n\nexport const DEFAULTS = {\n  keyColumn: '',\n  skipColumns: [],\n  statNameOptionValue: StatType.CURRENT,\n  statProgressMaxValue: null,\n  coloringType: ColoringType.PALLETE,\n  titleViewType: TitleViewOptions.SEPARATE_TITLE_LINE,\n  sortingOrder: 'none',\n  valueLabelType: ValueLabelType.ABSOLUTE,\n  alias: '',\n  prefix: '',\n  postfix: '',\n  thresholds: '10, 30',\n  // https://github.com/grafana/grafana/blob/v4.1.1/public/app/plugins/panel/singlestat/module.ts#L57\n  colors: ['rgba(245, 54, 54, 0.9)', 'rgba(237, 129, 40, 0.89)', 'rgba(50, 172, 45, 0.97)'],\n  colorsKeyMappingDefault: 'rgba(245, 54, 54, 0.9)',\n  colorKeyMappings: [],\n  nullMapping: undefined,\n  tooltipMode: TooltipMode.ALL_SERIES,\n  opacity: 0.5,\n  limit: 50\n};\n\n\nexport class PanelConfig {\n  private _panel: any;\n  public constructor(panel: any) {\n    this._panel = panel;\n\n    // migrations\n    if(this.getValue('coloringType') === 'auto') {\n      this.setValue('coloringType', ColoringType.PALLETE);\n    }\n\n    const skipColumn = this.getValue('skipColumn');\n    if(skipColumn !== undefined && skipColumn !== '') {\n      this.setValue('skipColumn', undefined);\n      this.setValue('skipColumns', [skipColumn]);\n    }\n  }\n\n  public getValue(key: string): any {\n    return this._panel[key];\n  }\n\n  public setValue(key: string, value: any): void {\n    this._panel[key] = value;\n  }\n\n  private _pluginDirName: string;\n  public get pluginDirName(): string {\n    if(!this._pluginDirName) {\n      var panels = window['grafanaBootData'].settings.panels;\n      var thisPanel = panels[this._panel.type];\n      // the system loader preprends publib to the url,\n      // add a .. to go back one level\n      this._pluginDirName = thisPanel.baseUrl + '/';\n    }\n    return this._pluginDirName;\n  }\n}\n","import { ColoringType, PanelConfig, TitleViewOptions, ValueLabelType } from './panel_config';\nimport { getFormattedValue } from './value_formatter';\n\nimport * as _ from 'lodash';\n\n\ntype ProgressTitle = {\n  barHeight: number,\n  titleHeight: number,\n  position: Position\n};\n\nenum Position {\n  STATIC = 'static',\n  ABSOLUTE = 'absolute'\n}\n\n/**\n * It's model for rendering bars in view (partial) and tooltip\n */\nexport type Bar = {\n  name: string,\n  value: number,\n  color: string\n}\n\n/**\n * Model for the main component of the app -- bars, but it's not just a Bar,\n * it also keeps all small \"bars\", title and metainfo\n */\nexport class ProgressBar {\n\n  private _bars: Bar[];\n  private _active: boolean;\n\n  constructor(\n    private _panelConfig: PanelConfig,\n    private _title: string,\n    private _keys: string[], // maybe \"_names\" is better than \"_keys\"\n    private _values: number[],\n    private _maxTotalValue: number\n  ) {\n    if(this._keys.length !== this._values.length) {\n      throw new Error('keys amount should be equal to values amount');\n    }\n    this._bars = [];\n    for(let i = 0; i < _keys.length; ++i) {\n      this._bars.push({\n        name: this._keys[i],\n        value: this._values[i],\n        color: mapValue2Color(this._values[i], this._keys[i], i, this._panelConfig)\n      });\n    }\n\n    // bad code starts:\n\n  }\n\n  get active(): boolean { return this._active; }\n  set active(value: boolean) { this._active = value;}\n\n  get title(): string { return this._title; }\n\n  get keys(): string[] { return this._keys; }\n\n  get values(): number[] { return this._values; }\n\n  get bars(): Bar[] { return this._bars; }\n\n  get sumOfValues(): number { return _.sum(this.values); }\n\n  get percentValues(): number[] {\n    return this.values.map(\n      value => value / this.sumOfValues * 100\n    );\n  }\n\n  get aggregatedProgress(): number {\n    return (this.sumOfValues / this._maxTotalValue) * 100;\n  }\n\n  get totalValue(): number {\n    const valueLabelType = this._panelConfig.getValue('valueLabelType');\n    switch(valueLabelType) {\n      case ValueLabelType.ABSOLUTE:\n        return this.sumOfValues;\n      case ValueLabelType.PERCENTAGE:\n        return this.aggregatedProgress;\n      default:\n        throw new Error(`Unknown value label type: ${valueLabelType}`);\n    }\n  }\n\n  get formattedTotalValue(): string {\n    return getFormattedValue(\n      this.totalValue,\n      this._panelConfig.getValue('prefix'),\n      this._panelConfig.getValue('postfix'),\n      this._panelConfig.getValue('decimals')\n    );\n  }\n\n  get colors(): string[] {\n    return _.map(this._bars, bar => bar.color);\n  }\n\n  // it should go somewhere to view\n  get titleParams(): ProgressTitle {\n    const titleType = this._panelConfig.getValue('titleViewType');\n    switch(titleType) {\n      case TitleViewOptions.SEPARATE_TITLE_LINE:\n        return {\n          barHeight: 8,\n          titleHeight: 16,\n          position: Position.STATIC\n        };\n      case TitleViewOptions.INLINE:\n        return {\n          barHeight: 24,\n          titleHeight: 24,\n          position: Position.ABSOLUTE\n        };\n      default:\n        throw new Error(`Wrong titleType: ${titleType}`);\n    }\n  }\n\n  get opacity(): string {\n    return this._panelConfig.getValue('opacity');\n  }\n\n}\n\n/** VIEW **/\n\nfunction mapValue2Color(value: number, key: string, index: number, _panelConfig: any): string {\n  const colorType: ColoringType = _panelConfig.getValue('coloringType');\n  const colors: string[] = _panelConfig.getValue('colors');\n\n  switch(colorType) {\n    case ColoringType.PALLETE:\n      return colors[index % colors.length];\n    case ColoringType.THRESHOLDS:\n      // TODO: parse only once\n      const thresholds = _panelConfig.getValue('thresholds').split(',').map(parseFloat);\n      if(colors.length <= thresholds.length) {\n        // we add one because a threshold is a cut of the range of values\n        throw new Error('Number of colors must be at least as number as threasholds + 1');\n      }\n      for(let i = thresholds.length; i > 0; i--) {\n        if(value >= thresholds[i - 1]) {\n          return colors[i];\n        }\n      }\n      return colors[0];\n    case ColoringType.KEY_MAPPING:\n      const colorKeyMappings = _panelConfig.getValue('colorKeyMappings') as any[];\n      const keyColorMapping = _.find(colorKeyMappings, k => k.key === key);\n      if(keyColorMapping === undefined) {\n        return _panelConfig.getValue('colorsKeyMappingDefault');\n      }\n      return keyColorMapping.color;\n    default:\n      throw new Error('Unknown color type ' + colorType);\n  }\n}\n","import * as _ from 'lodash';\n\n\nexport function getFormattedValue(\n  value: number,\n  prefix: string,\n  postfix: string,\n  decimals: number\n): string {\n  return `${prefix}${getFormattedFloat(value, decimals)}${postfix}`;\n}\n\nfunction getFormattedFloat(value: number, decimals: number): string {\n  let dm = getDecimalsForValue(value, decimals).decimals;\n\n  if(dm === 0) {\n    return Math.round(value).toString();\n  }\n\n  let fv = value;\n  for(let i = 0; i < dm; i++) {\n    fv *= 10;\n  };\n  let fvs = Math.round(fv).toString();\n  return fvs.substr(0, fvs.length - dm) + '.' + fvs.substr(fvs.length - dm);\n}\n\nfunction getDecimalsForValue(value: number, decimals?: number) {\n  // based on https://github.com/grafana/grafana/blob/v4.1.1/public/app/plugins/panel/singlestat/module.ts\n  if(_.isNumber(decimals)) {\n    return {\n      decimals,\n      scaledDecimals: null\n    };\n  }\n\n  let delta = value / 2;\n  let dec = -Math.floor(Math.log(delta) / Math.LN10);\n\n  let magn = Math.pow(10, -dec),\n    norm = delta / magn, // norm is between 1.0 and 10.0\n    size;\n\n  if(norm < 1.5) {\n    size = 1;\n  } else if (norm < 3) {\n    size = 2;\n    // special case for 2.5, requires an extra decimal\n    if (norm > 2.25) {\n      size = 2.5;\n      ++dec;\n    }\n  } else if(norm < 7.5) {\n    size = 5;\n  } else {\n    size = 10;\n  }\n\n  size *= magn;\n\n  // reduce starting decimals if not needed\n  if(Math.floor(value) === value) {\n    dec = 0;\n  }\n\n  let result: any = {};\n  result.decimals = Math.max(0, dec);\n  result.scaledDecimals = result.decimals - Math.floor(Math.log(size) / Math.LN10) + 2;\n\n  return result;\n}\n","module.exports = __WEBPACK_EXTERNAL_MODULE_grafana_app_plugins_sdk__;","module.exports = __WEBPACK_EXTERNAL_MODULE_lodash__;"],"sourceRoot":""}